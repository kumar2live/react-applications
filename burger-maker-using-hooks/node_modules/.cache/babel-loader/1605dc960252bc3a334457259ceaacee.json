{"ast":null,"code":"var _jsxFileName = \"/Users/mk/Desktop/Udemy/React/react-applications/burger-maker-using-hooks/src/features/Containers/CheckOut/ContactData/ContactData.js\";\nimport React, { Component, useState } from \"react\";\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../../../store/actions/index';\nimport OrderxAxios from '../../../../axios-orders';\nimport CssClasses from './ContactData.module.css';\nimport ButtonsComponent from '../../../Components/UIElments/Buttons/Buttons';\nimport SpinnerComponent from '../../../Components/UIElments/Spinner/Spinner';\nimport InputComponent from '../../../Components/UIElments/Input/Input';\nimport { checkValidity } from '../../../../shared/utility';\nimport WithErrorHandler from '../../../hoc/WithErrorHandler/WithErrorHandler';\n\nconst ContactDataComponent = props => {\n  state = {\n    formIsValid: false,\n    orderForm: {\n      name: {\n        name: 'Name: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text',\n          placeholder: 'Your name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        name: 'Street: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text',\n          placeholder: 'Where is your house'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        name: 'Country: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        name: 'Zip Code: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text',\n          placeholder: 'Zip Code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 6\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        name: 'Email: ',\n        elemType: 'email',\n        elemConfig: {\n          type: 'text',\n          placeholder: 'Your Email ID'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        name: 'Delivery Method: ',\n        elemType: 'select',\n        elemConfig: {\n          options: [{\n            value: 'fastest',\n            displayValue: 'Fastest method'\n          }, {\n            value: 'cheapest',\n            displayValue: 'Cheapest method'\n          }]\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true\n      }\n    }\n  };\n  const [orderForm, setorderForm] = useState({\n    name: {\n      name: 'Name: ',\n      elemType: 'input',\n      elemConfig: {\n        type: 'text',\n        placeholder: 'Your name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      name: 'Street: ',\n      elemType: 'input',\n      elemConfig: {\n        type: 'text',\n        placeholder: 'Where is your house'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      name: 'Country: ',\n      elemType: 'input',\n      elemConfig: {\n        type: 'text',\n        placeholder: 'Country'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      name: 'Zip Code: ',\n      elemType: 'input',\n      elemConfig: {\n        type: 'text',\n        placeholder: 'Zip Code'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      name: 'Email: ',\n      elemType: 'email',\n      elemConfig: {\n        type: 'text',\n        placeholder: 'Your Email ID'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      name: 'Delivery Method: ',\n      elemType: 'select',\n      elemConfig: {\n        options: [{\n          value: 'fastest',\n          displayValue: 'Fastest method'\n        }, {\n          value: 'cheapest',\n          displayValue: 'Cheapest method'\n        }]\n      },\n      value: 'fastest',\n      validation: {},\n      valid: true\n    }\n  });\n  const [formIsValid, setformIsValid] = useState(false);\n\n  const getFormData = () => {\n    const formData = {};\n\n    for (let elemIden in this.state.orderForm) {\n      formData[elemIden] = this.state.orderForm[elemIden].value;\n    }\n\n    return formData;\n  };\n\n  const orderHandler = event => {\n    event.preventDefault();\n    const order = {\n      ingrediants: props.ings,\n      price: props.tPrice,\n      orderData: getFormData(),\n      userId: props.userId\n    };\n    props.onOrderSubmit(order, props.token);\n  };\n\n  const propertyChangedHandler = (event, inputIdentifier) => {\n    const {\n      value\n    } = event.target;\n    const updatedOrderForm = { ...this.state.orderForm\n    };\n    const updatedOrderElem = { ...updatedOrderForm[inputIdentifier]\n    };\n    updatedOrderElem.value = value;\n    updatedOrderElem.touched = true;\n    updatedOrderElem.valid = checkValidity(updatedOrderElem.value, updatedOrderElem.validation);\n    updatedOrderForm[inputIdentifier] = updatedOrderElem;\n    let formValidity = true;\n\n    for (let elems in updatedOrderForm) {\n      formValidity = updatedOrderForm[elems].valid && formValidity;\n    }\n\n    this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid: formValidity\n    });\n  };\n\n  const formElemArr = [];\n\n  for (let key in this.state.orderForm) {\n    formElemArr.push({\n      id: key,\n      config: this.state.orderForm[key]\n    });\n  }\n\n  let elem = null;\n\n  if (props.loading) {\n    elem = React.createElement(SpinnerComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    });\n  } else {\n    elem = React.createElement(\"form\", {\n      onSubmit: orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, formElemArr.map(formElem => {\n      return React.createElement(InputComponent, {\n        invalid: !formElem.config.valid,\n        shouldValidate: formElem.config.validation,\n        touched: formElem.config.touched,\n        key: formElem.id,\n        label: formElem.config.name,\n        elemType: formElem.config.elemType,\n        elemConfig: formElem.config.elemConfig,\n        value: formElem.config.value,\n        propertyChanged: e => {\n          this.propertyChangedHandler(e, formElem.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      });\n    }), React.createElement(ButtonsComponent, {\n      btnType: \"Success\",\n      btnDisabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"ORDER\"));\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: CssClasses.ContactData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, \"Your Burger is just $\", (+props.tPrice).toFixed(2)), React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, \"Enter yout Contact Information\"), elem));\n};\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burger.ingrediants,\n    tPrice: state.burger.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderSubmit: (order, token) => dispatch(actionTypes.orderBurger(order, token)),\n    onIngrediantsReset: () => dispatch(actionTypes.resetIngrediant())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithErrorHandler(ContactDataComponent, OrderxAxios));","map":{"version":3,"sources":["/Users/mk/Desktop/Udemy/React/react-applications/burger-maker-using-hooks/src/features/Containers/CheckOut/ContactData/ContactData.js"],"names":["React","Component","useState","connect","actionTypes","OrderxAxios","CssClasses","ButtonsComponent","SpinnerComponent","InputComponent","checkValidity","WithErrorHandler","ContactDataComponent","props","state","formIsValid","orderForm","name","elemType","elemConfig","type","placeholder","value","validation","required","valid","touched","street","country","zipCode","minLength","maxLength","email","deliveryMethod","options","displayValue","setorderForm","setformIsValid","getFormData","formData","elemIden","orderHandler","event","preventDefault","order","ingrediants","ings","price","tPrice","orderData","userId","onOrderSubmit","token","propertyChangedHandler","inputIdentifier","target","updatedOrderForm","updatedOrderElem","formValidity","elems","setState","formElemArr","key","push","id","config","elem","loading","map","formElem","e","ContactData","toFixed","mapStateToProps","burger","totalPrice","auth","mapDispatchToProps","dispatch","orderBurger","onIngrediantsReset","resetIngrediant"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../../../store/actions/index';\n\nimport OrderxAxios from '../../../../axios-orders';\n\nimport CssClasses from './ContactData.module.css';\n\nimport ButtonsComponent from '../../../Components/UIElments/Buttons/Buttons';\nimport SpinnerComponent from '../../../Components/UIElments/Spinner/Spinner';\nimport InputComponent from '../../../Components/UIElments/Input/Input';\n\nimport { checkValidity } from '../../../../shared/utility';\n\nimport WithErrorHandler from '../../../hoc/WithErrorHandler/WithErrorHandler';\n\nconst ContactDataComponent = (props) => {\n  state = {\n    formIsValid: false,\n    orderForm: {\n      name: {\n        name: 'Name: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Your name',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        name: 'Street: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Where is your house',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        name: 'Country: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Country',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        name: 'Zip Code: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Zip Code',\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        name: 'Email: ',\n        elemType: 'email',\n        elemConfig: {\n          type: 'text', placeholder: 'Your Email ID',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryMethod: {\n        name: 'Delivery Method: ',\n        elemType: 'select',\n        elemConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest method'},\n            {value: 'cheapest', displayValue: 'Cheapest method'}\n          ],\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true,\n      },\n    },\n  }\n\n  const [orderForm, setorderForm] = useState(\n    {\n      name: {\n        name: 'Name: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Your name',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        name: 'Street: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Where is your house',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        name: 'Country: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Country',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        name: 'Zip Code: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Zip Code',\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        name: 'Email: ',\n        elemType: 'email',\n        elemConfig: {\n          type: 'text', placeholder: 'Your Email ID',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryMethod: {\n        name: 'Delivery Method: ',\n        elemType: 'select',\n        elemConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest method'},\n            {value: 'cheapest', displayValue: 'Cheapest method'}\n          ],\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true,\n      },\n    }\n  );\n  const [formIsValid, setformIsValid] = useState(false);\n\n  const getFormData = () => {\n    const formData = {};\n\n    for (let elemIden in this.state.orderForm) {\n      formData[elemIden] = this.state.orderForm[elemIden].value;\n    }\n\n    return formData;\n  }\n\n  const orderHandler = (event) => {\n    event.preventDefault();\n\n    const order = {\n      ingrediants: props.ings,\n      price: props.tPrice,\n      orderData: getFormData(),\n      userId: props.userId,\n    }\n\n    props.onOrderSubmit(order, props.token);\n  }\n\n  const propertyChangedHandler = (event, inputIdentifier) => {\n    const {value} = event.target;\n    const updatedOrderForm = {...this.state.orderForm};\n    const updatedOrderElem = {...updatedOrderForm[inputIdentifier]};\n    updatedOrderElem.value = value;\n    updatedOrderElem.touched = true;\n    updatedOrderElem.valid = checkValidity(updatedOrderElem.value , updatedOrderElem.validation)\n\n    updatedOrderForm[inputIdentifier] = updatedOrderElem;\n    \n    let formValidity = true;\n    for (let elems in updatedOrderForm) {\n      formValidity = (updatedOrderForm[elems].valid && formValidity);\n    }\n\n    this.setState({\n      orderForm: updatedOrderForm, formIsValid: formValidity,\n    })\n  }\n\n  const formElemArr = [];\n  for(let key in this.state.orderForm) {\n    formElemArr.push({\n      id: key,\n      config: this.state.orderForm[key],\n    });\n  }\n\n  let elem = null;\n\n  if (props.loading) {\n    elem = (<SpinnerComponent />);\n  } else {\n    elem = (\n      <form onSubmit={orderHandler}>\n        {formElemArr.map((formElem) => {\n          return (\n            <InputComponent\n              invalid={!formElem.config.valid}\n              shouldValidate={formElem.config.validation}\n              touched={formElem.config.touched}\n              key={formElem.id}\n              label={formElem.config.name}\n              elemType={formElem.config.elemType}\n              elemConfig={formElem.config.elemConfig}\n              value={formElem.config.value}\n              propertyChanged={(e) => {this.propertyChangedHandler(e, formElem.id)}}\n            />\n          );\n        })}\n\n        <ButtonsComponent btnType='Success' btnDisabled={!this.state.formIsValid} >ORDER</ButtonsComponent>\n      </form>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <div className={CssClasses.ContactData}>\n        <h4>Your Burger is just ${(+props.tPrice).toFixed(2)}</h4>\n        <h4>Enter yout Contact Information</h4>\n\n        {elem}\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burger.ingrediants,\n    tPrice: state.burger.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onOrderSubmit: (order, token) => dispatch(actionTypes.orderBurger(order, token)),\n    onIngrediantsReset: () => dispatch(actionTypes.resetIngrediant()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithErrorHandler(ContactDataComponent, OrderxAxios));"]},"metadata":{},"sourceType":"module"}