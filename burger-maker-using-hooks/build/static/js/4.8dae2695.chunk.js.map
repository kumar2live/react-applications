{"version":3,"sources":["shared/utility.js","features/Containers/Auth/AuthComponent.module.css","features/Containers/Auth/AuthComponent.js","features/Components/UIElments/Input/Input.js","features/Components/UIElments/Input/Input.module.css"],"names":["checkValidity","value","rules","isValid","required","trim","minLength","length","maxLength","module","exports","AuthComponent","state","controls","email","name","elemType","elemConfig","type","placeholder","validation","isEmail","valid","touched","password","isSignUp","toggleIsSignUp","setState","prevState","submitHandler","e","preventDefault","props","onAuth","formChangedHanleder","event","input","target","updatedControls","touced","propertyChangedHandler","inputIdentifier","updatedOrderForm","updatedOrderElem","formValidity","elems","formIsValid","this","isBurgerBuilding","authRedirectPath","onSetAuthRedirectPath","formElemArr","key","push","id","config","authRedirect","isAuthenticated","to","form","map","formElem","invalid","shouldValidate","label","propertyChanged","loading","errorMessage","error","style","color","message","Fragment","textAlign","className","CssClasses","Auth","onSubmit","btnType","btnClicked","Component","connect","auth","token","burger","building","dispatch","ActionTypes","InputComponent","inputElem","errorElem","inputClasses","CssStyles","InputElem","Invalid","onChange","join","options","opt","displayValue","Input","Label","htmlFor"],"mappings":"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","file":"static/js/4.8dae2695.chunk.js","sourcesContent":["export const checkValidity = (value, rules) => {\n  let isValid = true;\n\n  if (rules.required) {\n    isValid = (value.trim() !== '') && isValid;\n  }\n\n  if (rules.minLength) {\n    isValid = (value.length >= rules.minLength && isValid);\n  }\n  \n  if (rules.maxLength) {\n    isValid = (value.length <= rules.maxLength && isValid);\n  }\n  \n  return isValid;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"AuthComponent_Auth__2t2D4\"};","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\nimport * as ActionTypes from '../../../store/actions/index';\n\nimport ButtonsComponent from '../../Components/UIElments/Buttons/Buttons';\nimport SpinnerComponent from '../../Components/UIElments/Spinner/Spinner';\nimport InputComponent from '../../Components/UIElments/Input/Input';\n\nimport { checkValidity } from '../../../shared/utility';\n\nimport CssClasses from './AuthComponent.module.css';\n\nclass AuthComponent extends Component {\n  state = {\n    controls: {\n      email: {\n        name: 'Email: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'email', placeholder: 'User name',\n        },\n        value: 'test@test.com',\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        name: 'Password: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'password', placeholder: 'Password',\n        },\n        value: 'testing',\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignUp: false,\n  }\n\n  componentDidMount() {\n    if (!this.props.isBurgerBuilding && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  toggleIsSignUp = () => {\n    this.setState(prevState => {\n      return {isSignUp: !prevState.isSignUp}\n    })\n  }\n\n  submitHandler = (e) => {\n    e.preventDefault();\n\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n  }\n\n  formChangedHanleder = (event, input) => {\n    const {value} = event.target;\n    const updatedControls = {\n      ...this.state.controls,\n      [input]: {\n        ...this.state.controls[input],\n        value: value,\n        valid: checkValidity(value, this.state.controls[input].validation),\n        touced: true,\n      }\n    }\n\n    this.setState({controls: updatedControls});\n  }\n\n  propertyChangedHandler = (event, inputIdentifier) => {\n    const {value} = event.target;\n    const updatedOrderForm = {...this.state.controls};\n    const updatedOrderElem = {...updatedOrderForm[inputIdentifier]};\n    updatedOrderElem.value = value;\n    updatedOrderElem.touched = true;\n    updatedOrderElem.valid = checkValidity(updatedOrderElem.value , updatedOrderElem.validation)\n\n    updatedOrderForm[inputIdentifier] = updatedOrderElem;\n    \n    let formValidity = true;\n    for (let elems in updatedOrderForm) {\n      formValidity = (updatedOrderForm[elems].valid && formValidity);\n    }\n\n    this.setState({\n      controls: updatedOrderForm, formIsValid: formValidity,\n    })\n  }\n\n  render () {\n    const formElemArr = [];\n    for(let key in this.state.controls) {\n      formElemArr.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />\n    }\n\n    let form = formElemArr.map((formElem) => {\n      return (\n        <InputComponent\n          invalid={!formElem.config.valid}\n          shouldValidate={formElem.config.validation}\n          touched={formElem.config.touched}\n          key={formElem.id}\n          label={formElem.config.name}\n          elemType={formElem.config.elemType}\n          elemConfig={formElem.config.elemConfig}\n          value={formElem.config.value}\n          propertyChanged={(e) => {this.propertyChangedHandler(e, formElem.id)}}\n        />\n      );\n    })\n\n    if (this.props.loading) {\n      form = (<SpinnerComponent />);\n    }\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = (\n      <p style={{color: '#ff1407'}}>{this.props.error.message}</p>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <div style={{textAlign: 'center'}}>Prefilled to ease access, feel free to create new account by registering</div>\n        <div className={CssClasses.Auth}>\n          {authRedirect}\n          {errorMessage}\n          <form onSubmit={this.submitHandler}>\n            {form}\n            <ButtonsComponent btnType='Success'> {this.state.isSignUp ? 'Register' : 'Login'} </ButtonsComponent>\n            {/* <ButtonsComponent btnType='Success' btnDisabled={!this.state.formIsValid} >Go !</ButtonsComponent> */}\n          </form>\n          <ButtonsComponent btnType='Danger' btnClicked={this.toggleIsSignUp}>\n            Switch To {this.state.isSignUp ? 'Sign In' : 'Sign Up'} !</ButtonsComponent>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    isBurgerBuilding: state.burger.building,\n    authRedirectPath: state.auth.authRedirectPath,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(ActionTypes.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(ActionTypes.setAuthRedirectPath('/'))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthComponent);","import React from 'react';\nimport CssStyles from './Input.module.css';\n\nconst InputComponent = (props) => {\n  let inputElem = null;\n  let errorElem = null;\n  // console.log(props);\n\n  const inputClasses = [CssStyles.InputElem];\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(CssStyles.Invalid);\n    errorElem = (<span style={{color: '#ab0c0c'}}>Please enter valid inputs.!</span>);\n  }\n\n  switch(props.elemType) {\n    case ('input'):\n    case ('email'):\n      inputElem = (<input onChange={props.propertyChanged}  className={inputClasses.join(' ')} {...props.elemConfig} value={props.value}/>);\n      break;\n    case ('textarea'):\n      inputElem = (<textarea onChange={props.propertyChanged} className={inputClasses.join(' ')} {...props.elemConfig} value={props.value} />);\n      break;\n    case ('select'):\n      inputElem = (\n        <select onChange={props.propertyChanged} className={inputClasses.join(' ')} value={props.value}>\n          {props.elemConfig.options.map((opt) => {\n            return (\n              <option key={opt.value} value={opt.value}> {opt.displayValue} </option>\n            );\n          })}\n        </select>\n        );\n      break;\n    default:\n      inputElem = (<input onChange={props.propertyChanged} className={inputClasses.join(' ')} {...props.elemConfig} value={props.value}/>);\n  }\n\n  return (\n    <div className={CssStyles.Input} >\n      <label className={CssStyles.Label} htmlFor={props.name}>{props.label}</label>\n      {inputElem}\n      {errorElem}\n    </div>\n  );\n}\n\nexport default InputComponent;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3eVeB\",\"Label\":\"Input_Label__116ES\",\"InputElem\":\"Input_InputElem__3mPQe\",\"Invalid\":\"Input_Invalid__29bGl\"};"],"sourceRoot":""}