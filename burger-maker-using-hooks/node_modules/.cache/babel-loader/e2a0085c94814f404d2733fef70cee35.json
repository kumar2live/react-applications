{"ast":null,"code":"var _jsxFileName = \"/Users/mk/Desktop/Udemy/React/react-applications/burger-maker-using-hooks/src/features/Containers/Auth/AuthComponent.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as ActionTypes from '../../../store/actions/index';\nimport ButtonsComponent from '../../Components/UIElments/Buttons/Buttons';\nimport SpinnerComponent from '../../Components/UIElments/Spinner/Spinner';\nimport InputComponent from '../../Components/UIElments/Input/Input';\nimport { checkValidity } from '../../../shared/utility';\nimport CssClasses from './AuthComponent.module.css';\n\nclass AuthComponent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          name: 'Email: ',\n          elemType: 'input',\n          elemConfig: {\n            type: 'email',\n            placeholder: 'User name'\n          },\n          value: 'test@test.com',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          name: 'Password: ',\n          elemType: 'input',\n          elemConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: 'testing',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignUp: false\n    };\n\n    this.toggleIsSignUp = () => {\n      this.setState(prevState => {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n\n    this.submitHandler = e => {\n      e.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n    };\n\n    this.formChangedHanleder = (event, input) => {\n      const {\n        value\n      } = event.target;\n      const updatedControls = { ...this.state.controls,\n        [input]: { ...this.state.controls[input],\n          value: value,\n          valid: checkValidity(value, this.state.controls[input].validation),\n          touced: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.propertyChangedHandler = (event, inputIdentifier) => {\n      const {\n        value\n      } = event.target;\n      const updatedOrderForm = { ...this.state.controls\n      };\n      const updatedOrderElem = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedOrderElem.value = value;\n      updatedOrderElem.touched = true;\n      updatedOrderElem.valid = checkValidity(updatedOrderElem.value, updatedOrderElem.validation);\n      updatedOrderForm[inputIdentifier] = updatedOrderElem;\n      let formValidity = true;\n\n      for (let elems in updatedOrderForm) {\n        formValidity = updatedOrderForm[elems].valid && formValidity;\n      }\n\n      this.setState({\n        controls: updatedOrderForm,\n        formIsValid: formValidity\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.isBurgerBuilding && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElemArr = [];\n\n    for (let key in this.state.controls) {\n      formElemArr.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      });\n    }\n\n    let form = formElemArr.map(formElem => {\n      return React.createElement(InputComponent, {\n        invalid: !formElem.config.valid,\n        shouldValidate: formElem.config.validation,\n        touched: formElem.config.touched,\n        key: formElem.id,\n        label: formElem.config.name,\n        elemType: formElem.config.elemType,\n        elemConfig: formElem.config.elemConfig,\n        value: formElem.config.value,\n        propertyChanged: e => {\n          this.propertyChangedHandler(e, formElem.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      });\n    });\n\n    if (this.props.loading) {\n      form = React.createElement(SpinnerComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = React.createElement(\"p\", {\n        style: {\n          color: '#ff1407'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, this.props.error.message);\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Prefilled to ease access, feel free to create new account by registering\"), React.createElement(\"div\", {\n      className: CssClasses.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, authRedirect, errorMessage, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, form, React.createElement(ButtonsComponent, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \" \", this.state.isSignUp ? 'Register' : 'Login', \" \")), React.createElement(ButtonsComponent, {\n      btnType: \"Danger\",\n      btnClicked: this.toggleIsSignUp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Switch To \", this.state.isSignUp ? 'Sign In' : 'Sign Up', \" !\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    isBurgerBuilding: state.burger.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(ActionTypes.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(ActionTypes.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthComponent);","map":{"version":3,"sources":["/Users/mk/Desktop/Udemy/React/react-applications/burger-maker-using-hooks/src/features/Containers/Auth/AuthComponent.js"],"names":["React","Component","Redirect","connect","ActionTypes","ButtonsComponent","SpinnerComponent","InputComponent","checkValidity","CssClasses","AuthComponent","state","controls","email","name","elemType","elemConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","toggleIsSignUp","setState","prevState","submitHandler","e","preventDefault","props","onAuth","formChangedHanleder","event","input","target","updatedControls","touced","propertyChangedHandler","inputIdentifier","updatedOrderForm","updatedOrderElem","formValidity","elems","formIsValid","componentDidMount","isBurgerBuilding","authRedirectPath","onSetAuthRedirectPath","render","formElemArr","key","push","id","config","authRedirect","isAuthenticated","form","map","formElem","loading","errorMessage","error","color","message","textAlign","Auth","mapStateToProps","auth","token","burger","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\nimport * as ActionTypes from '../../../store/actions/index';\n\nimport ButtonsComponent from '../../Components/UIElments/Buttons/Buttons';\nimport SpinnerComponent from '../../Components/UIElments/Spinner/Spinner';\nimport InputComponent from '../../Components/UIElments/Input/Input';\n\nimport { checkValidity } from '../../../shared/utility';\n\nimport CssClasses from './AuthComponent.module.css';\n\nclass AuthComponent extends Component {\n  state = {\n    controls: {\n      email: {\n        name: 'Email: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'email', placeholder: 'User name',\n        },\n        value: 'test@test.com',\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        name: 'Password: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'password', placeholder: 'Password',\n        },\n        value: 'testing',\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignUp: false,\n  }\n\n  componentDidMount() {\n    if (!this.props.isBurgerBuilding && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  toggleIsSignUp = () => {\n    this.setState(prevState => {\n      return {isSignUp: !prevState.isSignUp}\n    })\n  }\n\n  submitHandler = (e) => {\n    e.preventDefault();\n\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n  }\n\n  formChangedHanleder = (event, input) => {\n    const {value} = event.target;\n    const updatedControls = {\n      ...this.state.controls,\n      [input]: {\n        ...this.state.controls[input],\n        value: value,\n        valid: checkValidity(value, this.state.controls[input].validation),\n        touced: true,\n      }\n    }\n\n    this.setState({controls: updatedControls});\n  }\n\n  propertyChangedHandler = (event, inputIdentifier) => {\n    const {value} = event.target;\n    const updatedOrderForm = {...this.state.controls};\n    const updatedOrderElem = {...updatedOrderForm[inputIdentifier]};\n    updatedOrderElem.value = value;\n    updatedOrderElem.touched = true;\n    updatedOrderElem.valid = checkValidity(updatedOrderElem.value , updatedOrderElem.validation)\n\n    updatedOrderForm[inputIdentifier] = updatedOrderElem;\n    \n    let formValidity = true;\n    for (let elems in updatedOrderForm) {\n      formValidity = (updatedOrderForm[elems].valid && formValidity);\n    }\n\n    this.setState({\n      controls: updatedOrderForm, formIsValid: formValidity,\n    })\n  }\n\n  render () {\n    const formElemArr = [];\n    for(let key in this.state.controls) {\n      formElemArr.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />\n    }\n\n    let form = formElemArr.map((formElem) => {\n      return (\n        <InputComponent\n          invalid={!formElem.config.valid}\n          shouldValidate={formElem.config.validation}\n          touched={formElem.config.touched}\n          key={formElem.id}\n          label={formElem.config.name}\n          elemType={formElem.config.elemType}\n          elemConfig={formElem.config.elemConfig}\n          value={formElem.config.value}\n          propertyChanged={(e) => {this.propertyChangedHandler(e, formElem.id)}}\n        />\n      );\n    })\n\n    if (this.props.loading) {\n      form = (<SpinnerComponent />);\n    }\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = (\n      <p style={{color: '#ff1407'}}>{this.props.error.message}</p>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <div style={{textAlign: 'center'}}>Prefilled to ease access, feel free to create new account by registering</div>\n        <div className={CssClasses.Auth}>\n          {authRedirect}\n          {errorMessage}\n          <form onSubmit={this.submitHandler}>\n            {form}\n            <ButtonsComponent btnType='Success'> {this.state.isSignUp ? 'Register' : 'Login'} </ButtonsComponent>\n            {/* <ButtonsComponent btnType='Success' btnDisabled={!this.state.formIsValid} >Go !</ButtonsComponent> */}\n          </form>\n          <ButtonsComponent btnType='Danger' btnClicked={this.toggleIsSignUp}>\n            Switch To {this.state.isSignUp ? 'Sign In' : 'Sign Up'} !</ButtonsComponent>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    isBurgerBuilding: state.burger.building,\n    authRedirectPath: state.auth.authRedirectPath,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(ActionTypes.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(ActionTypes.setAuthRedirectPath('/'))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthComponent);"]},"metadata":{},"sourceType":"module"}