{"ast":null,"code":"import * as ActionTypes from '../actions/actionTypes';\nimport { updateObj } from '../../store/utility';\nconst initialState = {\n  ingrediants: null,\n  totalPrice: 4,\n  error: false,\n  building: false\n};\nconst INGREDIANT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.2,\n  bacon: 2.0\n}; // sample way to clean the switch case\n\nconst addIngrediant = (state, action) => {\n  const updateIng = {\n    [action.ingrediantName]: state.ingrediants[action.ingrediantName] + 1\n  };\n  const updateIngs = updateObj(state.ingrediants, updateIng);\n  const updatedState = {\n    ingrediants: updateIngs,\n    totalPrice: state.totalPrice + INGREDIANT_PRICES[action.ingrediantName],\n    building: true\n  };\n  return updateObj(state, updatedState);\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_INGREDIANT:\n      return addIngrediant(state, action);\n\n    case ActionTypes.REMOVE_INGREDIANT:\n      return { ...state,\n        ingrediants: { ...state.ingrediants,\n          [action.ingrediantName]: state.ingrediants[action.ingrediantName] - 1\n        },\n        totalPrice: state.totalPrice - INGREDIANT_PRICES[action.ingrediantName],\n        building: true\n      };\n\n    case ActionTypes.SET_INGREDIANTS:\n      return { ...state,\n        ingrediants: action.ingrediants,\n        error: false,\n        totalPrice: initialState.totalPrice,\n        building: false\n      };\n\n    case ActionTypes.FETCH_INGREDIANTS_FAILED:\n      return updateObj(state, {\n        error: true\n      });\n\n    case ActionTypes.RESET_INGREDIANTS:\n      return initialState;\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mk/Desktop/Udemy/React/react-applications/burger-maker-using-hooks/src/store/reducers/burgerReducer.js"],"names":["ActionTypes","updateObj","initialState","ingrediants","totalPrice","error","building","INGREDIANT_PRICES","salad","cheese","meat","bacon","addIngrediant","state","action","updateIng","ingrediantName","updateIngs","updatedState","reducer","type","ADD_INGREDIANT","REMOVE_INGREDIANT","SET_INGREDIANTS","FETCH_INGREDIANTS_FAILED","RESET_INGREDIANTS"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,SAASC,SAAT,QAA0B,qBAA1B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,IADM;AAEnBC,EAAAA,UAAU,EAAE,CAFO;AAGnBC,EAAAA,KAAK,EAAE,KAHY;AAInBC,EAAAA,QAAQ,EAAE;AAJS,CAArB;AAOA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,GADiB;AAExBC,EAAAA,MAAM,EAAE,GAFgB;AAGxBC,EAAAA,IAAI,EAAE,GAHkB;AAIxBC,EAAAA,KAAK,EAAE;AAJiB,CAA1B,C,CAOA;;AACA,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,QAAMC,SAAS,GAAG;AAAC,KAACD,MAAM,CAACE,cAAR,GAAyBH,KAAK,CAACV,WAAN,CAAkBW,MAAM,CAACE,cAAzB,IAA2C;AAArE,GAAlB;AACA,QAAMC,UAAU,GAAGhB,SAAS,CAACY,KAAK,CAACV,WAAP,EAAoBY,SAApB,CAA5B;AACA,QAAMG,YAAY,GAAG;AACnBf,IAAAA,WAAW,EAAEc,UADM;AAEnBb,IAAAA,UAAU,EAAES,KAAK,CAACT,UAAN,GAAmBG,iBAAiB,CAACO,MAAM,CAACE,cAAR,CAF7B;AAGnBV,IAAAA,QAAQ,EAAE;AAHS,GAArB;AAKA,SAAOL,SAAS,CAACY,KAAD,EAAQK,YAAR,CAAhB;AACF,CATD;;AAWA,MAAMC,OAAO,GAAG,CAACN,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AAEhD,UAAOA,MAAM,CAACM,IAAd;AACE,SAAKpB,WAAW,CAACqB,cAAjB;AACE,aAAOT,aAAa,CAACC,KAAD,EAAQC,MAAR,CAApB;;AACF,SAAKd,WAAW,CAACsB,iBAAjB;AACE,aAAO,EACL,GAAGT,KADE;AAELV,QAAAA,WAAW,EAAE,EACX,GAAGU,KAAK,CAACV,WADE;AAEX,WAACW,MAAM,CAACE,cAAR,GAAyBH,KAAK,CAACV,WAAN,CAAkBW,MAAM,CAACE,cAAzB,IAA2C;AAFzD,SAFR;AAMLZ,QAAAA,UAAU,EAAES,KAAK,CAACT,UAAN,GAAmBG,iBAAiB,CAACO,MAAM,CAACE,cAAR,CAN3C;AAOLV,QAAAA,QAAQ,EAAE;AAPL,OAAP;;AASF,SAAKN,WAAW,CAACuB,eAAjB;AACE,aAAO,EACL,GAAGV,KADE;AAELV,QAAAA,WAAW,EAAEW,MAAM,CAACX,WAFf;AAGLE,QAAAA,KAAK,EAAE,KAHF;AAILD,QAAAA,UAAU,EAAEF,YAAY,CAACE,UAJpB;AAKLE,QAAAA,QAAQ,EAAE;AALL,OAAP;;AAOF,SAAKN,WAAW,CAACwB,wBAAjB;AACE,aAAOvB,SAAS,CAACY,KAAD,EAAQ;AAACR,QAAAA,KAAK,EAAE;AAAR,OAAR,CAAhB;;AACF,SAAKL,WAAW,CAACyB,iBAAjB;AACE,aAAOvB,YAAP;;AACF;AACE,aAAO,EAAC,GAAGW;AAAJ,OAAP;AA1BJ;AA4BD,CA9BD;;AAgCA,eAAeM,OAAf","sourcesContent":["import * as ActionTypes from '../actions/actionTypes';\n\nimport { updateObj } from '../../store/utility';\n\nconst initialState = {\n  ingrediants: null,\n  totalPrice: 4,\n  error: false,\n  building: false,\n}\n\nconst INGREDIANT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.2,\n  bacon: 2.0,\n}\n\n// sample way to clean the switch case\nconst addIngrediant = (state, action) => {\n   const updateIng = {[action.ingrediantName]: state.ingrediants[action.ingrediantName] + 1};\n   const updateIngs = updateObj(state.ingrediants, updateIng);\n   const updatedState = {\n     ingrediants: updateIngs,\n     totalPrice: state.totalPrice + INGREDIANT_PRICES[action.ingrediantName],\n     building: true,\n   }\n   return updateObj(state, updatedState);\n}\n\nconst reducer = (state = initialState, action) => {\n\n  switch(action.type) {\n    case ActionTypes.ADD_INGREDIANT:\n      return addIngrediant(state, action);\n    case ActionTypes.REMOVE_INGREDIANT:\n      return {\n        ...state,\n        ingrediants: {\n          ...state.ingrediants,\n          [action.ingrediantName]: state.ingrediants[action.ingrediantName] - 1,\n        },\n        totalPrice: state.totalPrice - INGREDIANT_PRICES[action.ingrediantName],\n        building: true,\n      }\n    case ActionTypes.SET_INGREDIANTS:\n      return {\n        ...state,\n        ingrediants: action.ingrediants,\n        error: false,\n        totalPrice: initialState.totalPrice,\n        building: false,\n      }\n    case ActionTypes.FETCH_INGREDIANTS_FAILED:\n      return updateObj(state, {error: true});\n    case ActionTypes.RESET_INGREDIANTS:\n      return initialState;\n    default:\n      return {...state};\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}