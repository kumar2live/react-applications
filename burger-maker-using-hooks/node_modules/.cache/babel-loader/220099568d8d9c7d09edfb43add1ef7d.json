{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport OrderxAxios from '../../axios-orders';\nexport const orderSuccess = (ID, orderData) => {\n  return {\n    type: actionTypes.ORDER_SUCCESS,\n    orderID: ID,\n    orderData: orderData\n  };\n};\nexport const orderFailed = payload => {\n  return {\n    type: actionTypes.ORDER_FAILED,\n    error: payload\n  };\n};\nexport const orderInitiate = () => {\n  return {\n    type: actionTypes.ORDER_INITATE\n  };\n};\nexport const orderBurger = (orderData, token) => {\n  return dispatch => {\n    dispatch(orderInitiate());\n    OrderxAxios.post('/orders.json?auth=' + token, orderData).then(response => {\n      dispatch(orderSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(orderFailed(error));\n    });\n  };\n};\nexport const orderInit = () => {\n  return {\n    type: actionTypes.ORDER_INIT\n  };\n}; // orders page\n\nexport const fetchOrdersInit = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_INIT\n  };\n};\nexport const fetchOrdersSuccess = payload => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: payload\n  };\n};\nexport const fetchOrdersFailed = payload => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAILED,\n    error: payload\n  };\n};\nexport const fetchOrders = (token, userId) => {\n  return (dispatch, _getState) => {\n    dispatch(fetchOrdersInit()); // one way to get the state inside but not advisable\n    // console.log(_getState().auth.token);\n\n    const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n    OrderxAxios.get('/orders.json' + queryParams).then(response => {\n      const fetchedOrders = [];\n      console.log('response -- ', response);\n\n      for (let key in response.data) {\n        fetchedOrders.push({ ...response.data[key],\n          id: key\n        });\n      }\n\n      console.log('response -- ', fetchedOrders);\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch(error => {\n      dispatch(fetchOrdersFailed(error));\n    });\n  };\n}; // orders delete\n\nexport const deleteOrdersInit = () => {\n  return {\n    type: actionTypes.DELETE_ORDERS_INIT\n  };\n};\nexport const deleteOrdersSuccess = () => {\n  return {\n    type: actionTypes.DELETE_ORDERS_SUCCESS\n  };\n};\nexport const deleteOrdersFailed = () => {\n  return {\n    type: actionTypes.DELETE_ORDERS_FAILED\n  };\n};\nexport const deleteOrder = (orderID, token, userId) => {\n  return dispatch => {\n    dispatch(deleteOrdersInit());\n    OrderxAxios.delete('/orders/' + orderID + '.json?auth=' + token).then(response => {\n      // console.log('res --- ', response);\n      dispatch(fetchOrders(token, userId));\n    }).catch(error => {\n      // console.log('err -- ', error);\n      dispatch(deleteOrdersFailed(error));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mk/Desktop/Udemy/React/react-applications/burger-maker-using-hooks/src/store/actions/orderActions.js"],"names":["actionTypes","OrderxAxios","orderSuccess","ID","orderData","type","ORDER_SUCCESS","orderID","orderFailed","payload","ORDER_FAILED","error","orderInitiate","ORDER_INITATE","orderBurger","token","dispatch","post","then","response","data","name","catch","orderInit","ORDER_INIT","fetchOrdersInit","FETCH_ORDERS_INIT","fetchOrdersSuccess","FETCH_ORDERS_SUCCESS","orders","fetchOrdersFailed","FETCH_ORDERS_FAILED","fetchOrders","userId","_getState","queryParams","get","fetchedOrders","console","log","key","push","id","deleteOrdersInit","DELETE_ORDERS_INIT","deleteOrdersSuccess","DELETE_ORDERS_SUCCESS","deleteOrdersFailed","DELETE_ORDERS_FAILED","deleteOrder","delete"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AAC7C,SAAO;AACLC,IAAAA,IAAI,EAAEL,WAAW,CAACM,aADb;AAELC,IAAAA,OAAO,EAAEJ,EAFJ;AAGLC,IAAAA,SAAS,EAAEA;AAHN,GAAP;AAKD,CANM;AAQP,OAAO,MAAMI,WAAW,GAAIC,OAAD,IAAa;AACtC,SAAO;AACLJ,IAAAA,IAAI,EAAEL,WAAW,CAACU,YADb;AAELC,IAAAA,KAAK,EAAEF;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,aAAa,GAAG,MAAM;AACjC,SAAO;AACLP,IAAAA,IAAI,EAAEL,WAAW,CAACa;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACV,SAAD,EAAYW,KAAZ,KAAsB;AAC/C,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACJ,aAAa,EAAd,CAAR;AAEAX,IAAAA,WAAW,CAACgB,IAAZ,CAAiB,uBAAuBF,KAAxC,EAA+CX,SAA/C,EAA0Dc,IAA1D,CAAgEC,QAAD,IAAc;AAC3EH,MAAAA,QAAQ,CAACd,YAAY,CAAEiB,QAAQ,CAACC,IAAT,CAAcC,IAAhB,EAAsBjB,SAAtB,CAAb,CAAR;AACD,KAFD,EAEGkB,KAFH,CAEUX,KAAD,IAAW;AAClBK,MAAAA,QAAQ,CAACR,WAAW,CAACG,KAAD,CAAZ,CAAR;AACD,KAJD;AAKD,GARD;AASD,CAVM;AAYP,OAAO,MAAMY,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLlB,IAAAA,IAAI,EAAEL,WAAW,CAACwB;AADb,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,SAAO;AACLpB,IAAAA,IAAI,EAAEL,WAAW,CAAC0B;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,kBAAkB,GAAIlB,OAAD,IAAa;AAC7C,SAAO;AACLJ,IAAAA,IAAI,EAAEL,WAAW,CAAC4B,oBADb;AAELC,IAAAA,MAAM,EAAEpB;AAFH,GAAP;AAID,CALM;AAOP,OAAO,MAAMqB,iBAAiB,GAAIrB,OAAD,IAAa;AAC5C,SAAO;AACLJ,IAAAA,IAAI,EAAEL,WAAW,CAAC+B,mBADb;AAELpB,IAAAA,KAAK,EAAEF;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAMuB,WAAW,GAAG,CAACjB,KAAD,EAAQkB,MAAR,KAAmB;AAC5C,SAAO,CAACjB,QAAD,EAAWkB,SAAX,KAAyB;AAC9BlB,IAAAA,QAAQ,CAACS,eAAe,EAAhB,CAAR,CAD8B,CAE9B;AACA;;AACA,UAAMU,WAAW,GAAG,WAAWpB,KAAX,GAAmB,6BAAnB,GAAmDkB,MAAnD,GAA4D,GAAhF;AAEAhC,IAAAA,WAAW,CAACmC,GAAZ,CAAgB,iBAAiBD,WAAjC,EAA8CjB,IAA9C,CAAoDC,QAAD,IAAc;AAC/D,YAAMkB,aAAa,GAAG,EAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BpB,QAA5B;;AACA,WAAK,IAAIqB,GAAT,IAAgBrB,QAAQ,CAACC,IAAzB,EAA+B;AAC7BiB,QAAAA,aAAa,CAACI,IAAd,CAAmB,EAAE,GAAGtB,QAAQ,CAACC,IAAT,CAAcoB,GAAd,CAAL;AAAyBE,UAAAA,EAAE,EAAEF;AAA7B,SAAnB;AACD;;AACDF,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,aAA5B;AACArB,MAAAA,QAAQ,CAACW,kBAAkB,CAACU,aAAD,CAAnB,CAAR;AACD,KARD,EAQGf,KARH,CAQUX,KAAD,IAAW;AAClBK,MAAAA,QAAQ,CAACc,iBAAiB,CAACnB,KAAD,CAAlB,CAAR;AACD,KAVD;AAWD,GAjBD;AAkBD,CAnBM,C,CAqBP;;AACA,OAAO,MAAMgC,gBAAgB,GAAG,MAAM;AACpC,SAAO;AACLtC,IAAAA,IAAI,EAAEL,WAAW,CAAC4C;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACvC,SAAO;AACLxC,IAAAA,IAAI,EAAEL,WAAW,CAAC8C;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AACtC,SAAO;AACL1C,IAAAA,IAAI,EAAEL,WAAW,CAACgD;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAAC1C,OAAD,EAAUQ,KAAV,EAAiBkB,MAAjB,KAA4B;AACrD,SAAQjB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC2B,gBAAgB,EAAjB,CAAR;AAEA1C,IAAAA,WAAW,CAACiD,MAAZ,CAAmB,aAAa3C,OAAb,GAAuB,aAAvB,GAAuCQ,KAA1D,EAAiEG,IAAjE,CAAuEC,QAAD,IAAc;AAClF;AACAH,MAAAA,QAAQ,CAACgB,WAAW,CAACjB,KAAD,EAAQkB,MAAR,CAAZ,CAAR;AACD,KAHD,EAGGX,KAHH,CAGUX,KAAD,IAAW;AAClB;AACAK,MAAAA,QAAQ,CAAC+B,kBAAkB,CAACpC,KAAD,CAAnB,CAAR;AACD,KAND;AAOD,GAVD;AAWD,CAZM","sourcesContent":["import * as actionTypes from './actionTypes';\nimport OrderxAxios from '../../axios-orders';\n\nexport const orderSuccess = (ID, orderData) => {\n  return {\n    type: actionTypes.ORDER_SUCCESS,\n    orderID: ID,\n    orderData: orderData,\n  }\n}\n\nexport const orderFailed = (payload) => {\n  return {\n    type: actionTypes.ORDER_FAILED,\n    error: payload,\n  }\n}\n\nexport const orderInitiate = () => {\n  return {\n    type: actionTypes.ORDER_INITATE,\n  }\n}\n\nexport const orderBurger = (orderData, token) => {\n  return (dispatch) => {\n    dispatch(orderInitiate());\n\n    OrderxAxios.post('/orders.json?auth=' + token, orderData).then((response) => {\n      dispatch(orderSuccess (response.data.name, orderData));\n    }).catch((error) => {\n      dispatch(orderFailed(error));\n    });\n  }\n}\n\nexport const orderInit = () => {\n  return {\n    type: actionTypes.ORDER_INIT,\n  }\n}\n\n// orders page\nexport const fetchOrdersInit = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_INIT,\n  }\n}\n\nexport const fetchOrdersSuccess = (payload) => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: payload,\n  }\n}\n\nexport const fetchOrdersFailed = (payload) => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAILED,\n    error: payload,\n  }\n}\n\nexport const fetchOrders = (token, userId) => {\n  return (dispatch, _getState) => {\n    dispatch(fetchOrdersInit());\n    // one way to get the state inside but not advisable\n    // console.log(_getState().auth.token);\n    const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n\n    OrderxAxios.get('/orders.json' + queryParams).then((response) => {\n      const fetchedOrders = [];\n      console.log('response -- ', response);\n      for (let key in response.data) {\n        fetchedOrders.push({ ...response.data[key], id: key });\n      }\n      console.log('response -- ', fetchedOrders);\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch((error) => {\n      dispatch(fetchOrdersFailed(error));\n    });\n  }\n}\n\n// orders delete\nexport const deleteOrdersInit = () => {\n  return {\n    type: actionTypes.DELETE_ORDERS_INIT,\n  }\n}\n\nexport const deleteOrdersSuccess = () => {\n  return {\n    type: actionTypes.DELETE_ORDERS_SUCCESS,\n  }\n}\n\nexport const deleteOrdersFailed = () => {\n  return {\n    type: actionTypes.DELETE_ORDERS_FAILED,\n  }\n}\n\nexport const deleteOrder = (orderID, token, userId) => {\n  return (dispatch) => {\n    dispatch(deleteOrdersInit());\n\n    OrderxAxios.delete('/orders/' + orderID + '.json?auth=' + token).then((response) => {\n      // console.log('res --- ', response);\n      dispatch(fetchOrders(token, userId));\n    }).catch((error) => {\n      // console.log('err -- ', error);\n      dispatch(deleteOrdersFailed(error));\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}