{"ast":null,"code":"var _jsxFileName = \"/Users/mk/Desktop/Udemy/React/react-applications/burger-maker-using-hooks/src/features/Containers/Auth/AuthComponent.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as ActionTypes from '../../../store/actions/index';\nimport ButtonsComponent from '../../Components/UIElments/Buttons/Buttons';\nimport SpinnerComponent from '../../Components/UIElments/Spinner/Spinner';\nimport InputComponent from '../../Components/UIElments/Input/Input';\nimport { checkValidity } from '../../../shared/utility';\nimport CssClasses from './AuthComponent.module.css';\n\nconst AuthComponent = props => {\n  const [controls, setcontrols] = useState({\n    controls: {\n      email: {\n        name: 'Email: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'email',\n          placeholder: 'User name'\n        },\n        value: 'test@test.com',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        name: 'Password: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: 'testing',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    }\n  });\n  const [isSignUp, setisSignUp] = useState(false);\n  useEffect(() => {\n    if (!props.isBurgerBuilding && props.authRedirectPath !== '/') {\n      props.onSetAuthRedirectPath();\n    }\n  }, []);\n\n  const toggleIsSignUp = () => {\n    this.setState(prevState => {\n      return {\n        isSignUp: !prevState.isSignUp\n      };\n    });\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    props.onAuth(controls.email.value, controls.password.value, this.state.isSignUp);\n  };\n\n  const formChangedHanleder = (event, input) => {\n    const {\n      value\n    } = event.target;\n    const updatedControls = { ...controls,\n      [input]: { ...controls[input],\n        value: value,\n        valid: checkValidity(value, controls[input].validation),\n        touced: true\n      }\n    };\n    this.setState({\n      controls: updatedControls\n    });\n  };\n\n  const propertyChangedHandler = (event, inputIdentifier) => {\n    const {\n      value\n    } = event.target;\n    const updatedOrderForm = { ...controls\n    };\n    const updatedOrderElem = { ...updatedOrderForm[inputIdentifier]\n    };\n    updatedOrderElem.value = value;\n    updatedOrderElem.touched = true;\n    updatedOrderElem.valid = checkValidity(updatedOrderElem.value, updatedOrderElem.validation);\n    updatedOrderForm[inputIdentifier] = updatedOrderElem;\n    let formValidity = true;\n\n    for (let elems in updatedOrderForm) {\n      formValidity = updatedOrderForm[elems].valid && formValidity;\n    }\n\n    this.setState({\n      controls: updatedOrderForm,\n      formIsValid: formValidity\n    });\n  };\n\n  const formElemArr = [];\n\n  for (let key in controls) {\n    formElemArr.push({\n      id: key,\n      config: controls[key]\n    });\n  }\n\n  let authRedirect = null;\n\n  if (props.isAuthenticated) {\n    authRedirect = React.createElement(Redirect, {\n      to: props.authRedirectPath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    });\n  }\n\n  let form = formElemArr.map(formElem => {\n    return React.createElement(InputComponent, {\n      invalid: !formElem.config.valid,\n      shouldValidate: formElem.config.validation,\n      touched: formElem.config.touched,\n      key: formElem.id,\n      label: formElem.config.name,\n      elemType: formElem.config.elemType,\n      elemConfig: formElem.config.elemConfig,\n      value: formElem.config.value,\n      propertyChanged: e => {\n        this.propertyChangedHandler(e, formElem.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    });\n  });\n\n  if (props.loading) {\n    form = React.createElement(SpinnerComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    });\n  }\n\n  let errorMessage = null;\n\n  if (props.error) {\n    errorMessage = React.createElement(\"p\", {\n      style: {\n        color: '#ff1407'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, props.error.message);\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Prefilled to ease access, feel free to create new account by registering\"), React.createElement(\"div\", {\n    className: CssClasses.Auth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, authRedirect, errorMessage, React.createElement(\"form\", {\n    onSubmit: this.submitHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, form, React.createElement(ButtonsComponent, {\n    btnType: \"Success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \" \", this.state.isSignUp ? 'Register' : 'Login', \" \")), React.createElement(ButtonsComponent, {\n    btnType: \"Danger\",\n    btnClicked: this.toggleIsSignUp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Switch To \", this.state.isSignUp ? 'Sign In' : 'Sign Up', \" !\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    isBurgerBuilding: state.burger.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(ActionTypes.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(ActionTypes.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthComponent);","map":{"version":3,"sources":["/Users/mk/Desktop/Udemy/React/react-applications/burger-maker-using-hooks/src/features/Containers/Auth/AuthComponent.js"],"names":["React","Component","useState","useEffect","Redirect","connect","ActionTypes","ButtonsComponent","SpinnerComponent","InputComponent","checkValidity","CssClasses","AuthComponent","props","controls","setcontrols","email","name","elemType","elemConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","setisSignUp","isBurgerBuilding","authRedirectPath","onSetAuthRedirectPath","toggleIsSignUp","setState","prevState","submitHandler","e","preventDefault","onAuth","state","formChangedHanleder","event","input","target","updatedControls","touced","propertyChangedHandler","inputIdentifier","updatedOrderForm","updatedOrderElem","formValidity","elems","formIsValid","formElemArr","key","push","id","config","authRedirect","isAuthenticated","form","map","formElem","loading","errorMessage","error","color","message","textAlign","Auth","mapStateToProps","auth","token","burger","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\nimport * as ActionTypes from '../../../store/actions/index';\n\nimport ButtonsComponent from '../../Components/UIElments/Buttons/Buttons';\nimport SpinnerComponent from '../../Components/UIElments/Spinner/Spinner';\nimport InputComponent from '../../Components/UIElments/Input/Input';\n\nimport { checkValidity } from '../../../shared/utility';\n\nimport CssClasses from './AuthComponent.module.css';\n\nconst AuthComponent = (props) => {\n  const [controls, setcontrols] = useState({\n    controls: {\n      email: {\n        name: 'Email: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'email', placeholder: 'User name',\n        },\n        value: 'test@test.com',\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        name: 'Password: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'password', placeholder: 'Password',\n        },\n        value: 'testing',\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n  })\n  const [isSignUp, setisSignUp] = useState(false);\n\n  useEffect(() => {\n    if (!props.isBurgerBuilding && props.authRedirectPath !== '/') {\n      props.onSetAuthRedirectPath();\n    }\n  }, []);\n\n  const toggleIsSignUp = () => {\n    this.setState(prevState => {\n      return {isSignUp: !prevState.isSignUp}\n    })\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    props.onAuth(controls.email.value, controls.password.value, this.state.isSignUp);\n  }\n\n  const formChangedHanleder = (event, input) => {\n    const {value} = event.target;\n    const updatedControls = {\n      ...controls,\n      [input]: {\n        ...controls[input],\n        value: value,\n        valid: checkValidity(value, controls[input].validation),\n        touced: true,\n      }\n    }\n\n    this.setState({controls: updatedControls});\n  }\n\n  const propertyChangedHandler = (event, inputIdentifier) => {\n    const {value} = event.target;\n    const updatedOrderForm = {...controls};\n    const updatedOrderElem = {...updatedOrderForm[inputIdentifier]};\n    updatedOrderElem.value = value;\n    updatedOrderElem.touched = true;\n    updatedOrderElem.valid = checkValidity(updatedOrderElem.value , updatedOrderElem.validation)\n\n    updatedOrderForm[inputIdentifier] = updatedOrderElem;\n    \n    let formValidity = true;\n    for (let elems in updatedOrderForm) {\n      formValidity = (updatedOrderForm[elems].valid && formValidity);\n    }\n\n    this.setState({\n      controls: updatedOrderForm, formIsValid: formValidity,\n    })\n  }\n\n  const formElemArr = [];\n  for(let key in controls) {\n    formElemArr.push({\n      id: key,\n      config: controls[key],\n    });\n  }\n\n  let authRedirect = null;\n  if (props.isAuthenticated) {\n    authRedirect = <Redirect to={props.authRedirectPath} />\n  }\n\n  let form = formElemArr.map((formElem) => {\n    return (\n      <InputComponent\n        invalid={!formElem.config.valid}\n        shouldValidate={formElem.config.validation}\n        touched={formElem.config.touched}\n        key={formElem.id}\n        label={formElem.config.name}\n        elemType={formElem.config.elemType}\n        elemConfig={formElem.config.elemConfig}\n        value={formElem.config.value}\n        propertyChanged={(e) => {this.propertyChangedHandler(e, formElem.id)}}\n      />\n    );\n  })\n\n  if (props.loading) {\n    form = (<SpinnerComponent />);\n  }\n\n  let errorMessage = null;\n  if (props.error) {\n    errorMessage = (\n    <p style={{color: '#ff1407'}}>{props.error.message}</p>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <div style={{textAlign: 'center'}}>Prefilled to ease access, feel free to create new account by registering</div>\n      <div className={CssClasses.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <ButtonsComponent btnType='Success'> {this.state.isSignUp ? 'Register' : 'Login'} </ButtonsComponent>\n          {/* <ButtonsComponent btnType='Success' btnDisabled={!this.state.formIsValid} >Go !</ButtonsComponent> */}\n        </form>\n        <ButtonsComponent btnType='Danger' btnClicked={this.toggleIsSignUp}>\n          Switch To {this.state.isSignUp ? 'Sign In' : 'Sign Up'} !</ButtonsComponent>\n      </div>\n    </React.Fragment>\n  );\n  \n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    isBurgerBuilding: state.burger.building,\n    authRedirectPath: state.auth.authRedirectPath,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(ActionTypes.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(ActionTypes.setAuthRedirectPath('/'))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthComponent);"]},"metadata":{},"sourceType":"module"}