{"ast":null,"code":"var _jsxFileName = \"/Users/mk/Desktop/Udemy/React/react-applications/burger-maker-using-hooks/src/features/Containers/CheckOut/ContactData/ContactData.js\";\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../../../store/actions/index';\nimport OrderxAxios from '../../../../axios-orders';\nimport CssClasses from './ContactData.module.css';\nimport ButtonsComponent from '../../../Components/UIElments/Buttons/Buttons';\nimport SpinnerComponent from '../../../Components/UIElments/Spinner/Spinner';\nimport InputComponent from '../../../Components/UIElments/Input/Input';\nimport { checkValidity } from '../../../../shared/utility';\nimport WithErrorHandler from '../../../hoc/WithErrorHandler/WithErrorHandler';\n\nclass ContactDataComponent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formIsValid: false,\n      orderForm: {\n        name: {\n          name: 'Name: ',\n          elemType: 'input',\n          elemConfig: {\n            type: 'text',\n            placeholder: 'Your name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          name: 'Street: ',\n          elemType: 'input',\n          elemConfig: {\n            type: 'text',\n            placeholder: 'Where is your house'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          name: 'Country: ',\n          elemType: 'input',\n          elemConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          name: 'Zip Code: ',\n          elemType: 'input',\n          elemConfig: {\n            type: 'text',\n            placeholder: 'Zip Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          name: 'Email: ',\n          elemType: 'email',\n          elemConfig: {\n            type: 'text',\n            placeholder: 'Your Email ID'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          name: 'Delivery Method: ',\n          elemType: 'select',\n          elemConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest method'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest method'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          valid: true\n        }\n      }\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      const order = {\n        ingrediants: this.props.ings,\n        price: this.props.tPrice,\n        orderData: this.getFormData(),\n        userId: this.props.userId\n      };\n      this.props.onOrderSubmit(order, this.props.token);\n    };\n\n    this.propertyChangedHandler = (event, inputIdentifier) => {\n      const {\n        value\n      } = event.target;\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedOrderElem = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedOrderElem.value = value;\n      updatedOrderElem.touched = true;\n      updatedOrderElem.valid = checkValidity(updatedOrderElem.value, updatedOrderElem.validation);\n      updatedOrderForm[inputIdentifier] = updatedOrderElem;\n      let formValidity = true;\n\n      for (let elems in updatedOrderForm) {\n        formValidity = updatedOrderForm[elems].valid && formValidity;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formValidity\n      });\n    };\n  }\n\n  componentDidMount() {// console.log('ContactDataComponent this.props -- ', this.props);\n  }\n\n  getFormData() {\n    const formData = {};\n\n    for (let elemIden in this.state.orderForm) {\n      formData[elemIden] = this.state.orderForm[elemIden].value;\n    }\n\n    return formData;\n  }\n\n  render() {\n    const formElemArr = [];\n\n    for (let key in this.state.orderForm) {\n      formElemArr.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let elem = null;\n\n    if (this.props.loading) {\n      elem = React.createElement(SpinnerComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      });\n    } else {\n      elem = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, formElemArr.map(formElem => {\n        return React.createElement(InputComponent, {\n          invalid: !formElem.config.valid,\n          shouldValidate: formElem.config.validation,\n          touched: formElem.config.touched,\n          key: formElem.id,\n          label: formElem.config.name,\n          elemType: formElem.config.elemType,\n          elemConfig: formElem.config.elemConfig,\n          value: formElem.config.value,\n          propertyChanged: e => {\n            this.propertyChangedHandler(e, formElem.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        });\n      }), React.createElement(ButtonsComponent, {\n        btnType: \"Success\",\n        btnDisabled: !this.state.formIsValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"ORDER\"));\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: CssClasses.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Your Burger is just $\", (+this.props.tPrice).toFixed(2)), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Enter yout Contact Information\"), elem));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burger.ingrediants,\n    tPrice: state.burger.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderSubmit: (order, token) => dispatch(actionTypes.orderBurger(order, token)),\n    onIngrediantsReset: () => dispatch(actionTypes.resetIngrediant())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithErrorHandler(ContactDataComponent, OrderxAxios));","map":{"version":3,"sources":["/Users/mk/Desktop/Udemy/React/react-applications/burger-maker-using-hooks/src/features/Containers/CheckOut/ContactData/ContactData.js"],"names":["React","Component","connect","actionTypes","OrderxAxios","CssClasses","ButtonsComponent","SpinnerComponent","InputComponent","checkValidity","WithErrorHandler","ContactDataComponent","state","formIsValid","orderForm","name","elemType","elemConfig","type","placeholder","value","validation","required","valid","touched","street","country","zipCode","minLength","maxLength","email","deliveryMethod","options","displayValue","orderHandler","event","preventDefault","order","ingrediants","props","ings","price","tPrice","orderData","getFormData","userId","onOrderSubmit","token","propertyChangedHandler","inputIdentifier","target","updatedOrderForm","updatedOrderElem","formValidity","elems","setState","componentDidMount","formData","elemIden","render","formElemArr","key","push","id","config","elem","loading","map","formElem","e","ContactData","toFixed","mapStateToProps","burger","totalPrice","auth","mapDispatchToProps","dispatch","orderBurger","onIngrediantsReset","resetIngrediant"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../../../store/actions/index';\n\nimport OrderxAxios from '../../../../axios-orders';\n\nimport CssClasses from './ContactData.module.css';\n\nimport ButtonsComponent from '../../../Components/UIElments/Buttons/Buttons';\nimport SpinnerComponent from '../../../Components/UIElments/Spinner/Spinner';\nimport InputComponent from '../../../Components/UIElments/Input/Input';\n\nimport { checkValidity } from '../../../../shared/utility';\n\nimport WithErrorHandler from '../../../hoc/WithErrorHandler/WithErrorHandler';\n\nclass ContactDataComponent extends Component {\n  state = {\n    formIsValid: false,\n    orderForm: {\n      name: {\n        name: 'Name: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Your name',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        name: 'Street: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Where is your house',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        name: 'Country: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Country',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        name: 'Zip Code: ',\n        elemType: 'input',\n        elemConfig: {\n          type: 'text', placeholder: 'Zip Code',\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        name: 'Email: ',\n        elemType: 'email',\n        elemConfig: {\n          type: 'text', placeholder: 'Your Email ID',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryMethod: {\n        name: 'Delivery Method: ',\n        elemType: 'select',\n        elemConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest method'},\n            {value: 'cheapest', displayValue: 'Cheapest method'}\n          ],\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true,\n      },\n    },\n  }\n\n  componentDidMount() {\n    // console.log('ContactDataComponent this.props -- ', this.props);\n  }\n\n  getFormData() {\n    const formData = {};\n\n    for (let elemIden in this.state.orderForm) {\n      formData[elemIden] = this.state.orderForm[elemIden].value;\n    }\n\n    return formData;\n  }\n\n  orderHandler = (event) => {\n    event.preventDefault();\n\n    const order = {\n      ingrediants: this.props.ings,\n      price: this.props.tPrice,\n      orderData: this.getFormData(),\n      userId: this.props.userId,\n    }\n\n    this.props.onOrderSubmit(order, this.props.token);\n  }\n\n  propertyChangedHandler = (event, inputIdentifier) => {\n    const {value} = event.target;\n    const updatedOrderForm = {...this.state.orderForm};\n    const updatedOrderElem = {...updatedOrderForm[inputIdentifier]};\n    updatedOrderElem.value = value;\n    updatedOrderElem.touched = true;\n    updatedOrderElem.valid = checkValidity(updatedOrderElem.value , updatedOrderElem.validation)\n\n    updatedOrderForm[inputIdentifier] = updatedOrderElem;\n    \n    let formValidity = true;\n    for (let elems in updatedOrderForm) {\n      formValidity = (updatedOrderForm[elems].valid && formValidity);\n    }\n\n    this.setState({\n      orderForm: updatedOrderForm, formIsValid: formValidity,\n    })\n  }\n\n  render() {\n\n    const formElemArr = [];\n    for(let key in this.state.orderForm) {\n      formElemArr.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n\n    let elem = null;\n\n    if (this.props.loading) {\n      elem = (<SpinnerComponent />);\n    } else {\n      elem = (\n        <form onSubmit={this.orderHandler}>\n          {formElemArr.map((formElem) => {\n            return (\n              <InputComponent\n                invalid={!formElem.config.valid}\n                shouldValidate={formElem.config.validation}\n                touched={formElem.config.touched}\n                key={formElem.id}\n                label={formElem.config.name}\n                elemType={formElem.config.elemType}\n                elemConfig={formElem.config.elemConfig}\n                value={formElem.config.value}\n                propertyChanged={(e) => {this.propertyChangedHandler(e, formElem.id)}}\n              />\n            );\n          })}\n\n          <ButtonsComponent btnType='Success' btnDisabled={!this.state.formIsValid} >ORDER</ButtonsComponent>\n        </form>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <div className={CssClasses.ContactData}>\n          <h4>Your Burger is just ${(+this.props.tPrice).toFixed(2)}</h4>\n          <h4>Enter yout Contact Information</h4>\n\n          {elem}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burger.ingrediants,\n    tPrice: state.burger.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onOrderSubmit: (order, token) => dispatch(actionTypes.orderBurger(order, token)),\n    onIngrediantsReset: () => dispatch(actionTypes.resetIngrediant()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithErrorHandler(ContactDataComponent, OrderxAxios));"]},"metadata":{},"sourceType":"module"}